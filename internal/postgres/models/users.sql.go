// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const userDelete = `-- name: UserDelete :execresult
DELETE FROM users WHERE id = $1
`

func (q *Queries) UserDelete(ctx context.Context, id uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, userDelete, id)
}

const userInsert = `-- name: UserInsert :one
INSERT INTO users (email, hashed_password, id, admin) VALUES ($1, $2, $3, $4) RETURNING email, created, id, admin
`

type UserInsertParams struct {
	Email          string
	HashedPassword string
	ID             uuid.UUID
	Admin          bool
}

type UserInsertRow struct {
	Email   string
	Created pgtype.Timestamptz
	ID      uuid.UUID
	Admin   bool
}

func (q *Queries) UserInsert(ctx context.Context, arg UserInsertParams) (UserInsertRow, error) {
	row := q.db.QueryRow(ctx, userInsert,
		arg.Email,
		arg.HashedPassword,
		arg.ID,
		arg.Admin,
	)
	var i UserInsertRow
	err := row.Scan(
		&i.Email,
		&i.Created,
		&i.ID,
		&i.Admin,
	)
	return i, err
}

const userRetrieve = `-- name: UserRetrieve :one
SELECT email, created,  id, admin FROM users WHERE id = $1 LIMIT 1
`

type UserRetrieveRow struct {
	Email   string
	Created pgtype.Timestamptz
	ID      uuid.UUID
	Admin   bool
}

func (q *Queries) UserRetrieve(ctx context.Context, id uuid.UUID) (UserRetrieveRow, error) {
	row := q.db.QueryRow(ctx, userRetrieve, id)
	var i UserRetrieveRow
	err := row.Scan(
		&i.Email,
		&i.Created,
		&i.ID,
		&i.Admin,
	)
	return i, err
}

const userRetrieveByEmail = `-- name: UserRetrieveByEmail :one
SELECT email, created,  id, admin FROM users WHERE email = $1 LIMIT 1
`

type UserRetrieveByEmailRow struct {
	Email   string
	Created pgtype.Timestamptz
	ID      uuid.UUID
	Admin   bool
}

func (q *Queries) UserRetrieveByEmail(ctx context.Context, email string) (UserRetrieveByEmailRow, error) {
	row := q.db.QueryRow(ctx, userRetrieveByEmail, email)
	var i UserRetrieveByEmailRow
	err := row.Scan(
		&i.Email,
		&i.Created,
		&i.ID,
		&i.Admin,
	)
	return i, err
}

const userUpdateAdmin = `-- name: UserUpdateAdmin :execresult
UPDATE users SET admin = $2 WHERE id = $1
`

type UserUpdateAdminParams struct {
	ID    uuid.UUID
	Admin bool
}

func (q *Queries) UserUpdateAdmin(ctx context.Context, arg UserUpdateAdminParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, userUpdateAdmin, arg.ID, arg.Admin)
}

const userUpdatePassword = `-- name: UserUpdatePassword :execresult
UPDATE users SET hashed_password = $2 WHERE id = $1
`

type UserUpdatePasswordParams struct {
	ID             uuid.UUID
	HashedPassword string
}

func (q *Queries) UserUpdatePassword(ctx context.Context, arg UserUpdatePasswordParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, userUpdatePassword, arg.ID, arg.HashedPassword)
}

const usersList = `-- name: UsersList :many
WITH row_data AS (
    SELECT email, created, id, admin FROM users ORDER BY email LIMIT $1 OFFSET $2
) SELECT
      email, created, id, admin,
      (SELECT COUNT(*) FROM users) AS row_data
FROM row_data
`

type UsersListParams struct {
	Limit  int32
	Offset int32
}

type UsersListRow struct {
	Email   string
	Created pgtype.Timestamptz
	ID      uuid.UUID
	Admin   bool
	RowData int64
}

func (q *Queries) UsersList(ctx context.Context, arg UsersListParams) ([]UsersListRow, error) {
	rows, err := q.db.Query(ctx, usersList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersListRow
	for rows.Next() {
		var i UsersListRow
		if err := rows.Scan(
			&i.Email,
			&i.Created,
			&i.ID,
			&i.Admin,
			&i.RowData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
